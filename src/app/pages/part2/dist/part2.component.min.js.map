{"version":3,"sources":["part2.component.ts"],"names":["core_1","require","Part2Component","this","diamonds","errorMessage","prototype","onNumberIsChange","value","drawDiamond","target","num","validatation","numSize","i","createDiamond","addSpace","astrk","lengthSpace","Math","round","j","initialSpace","console","log","isValid","parseInt","isNaN","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAOAC,eAAA,WAIE,SAAAA,IAHOC,KAAAC,SAAW,GACXD,KAAAE,aAAe,GAsExB,OAlEEH,EAAAI,UAAAC,iBAAA,SAAiBC,GACfL,KAAKC,SAAW,GAChBD,KAAKM,YAAYD,EAAME,OAAOF,QAGhCN,EAAAI,UAAAG,YAAA,SAAYE,GACV,GAAIR,KAAKS,aAAaD,GAAM,CAC1BR,KAAKE,aAAe,GAGpB,IAFA,IACIQ,EAAUF,EAAM,EACXG,EAAI,EAAGA,EAAID,EAASC,IAC3BX,KAAKY,cAAcJ,EAAKG,EAHP,OAKnB,IAASA,EAAID,EAAc,GAALC,EAAQA,IAC5BX,KAAKY,cAAcJ,EAAKG,EANP,SAWvBZ,EAAAI,UAAAU,SAAA,SAASL,EAAaG,GAGpB,IAFA,IAAIG,EAAQ,GACNC,EAAcC,KAAKC,MAAMT,EAAM,GAAKG,EAAI,EACrCO,EAAI,EAAGA,GAAKH,EAAaG,IAChCJ,GAAS,IAEX,OAAOA,GAGTf,EAAAI,UAAAS,cAAA,SAAcJ,EAAaG,EAAWQ,GACpC,KAAMR,EAAI,GAAI,CAEZ,IADA,IAAIG,EAAQd,KAAKa,SAASL,EAAKG,GACtBO,EAAI,EAAGA,GAAKP,EAAGO,IACtBJ,GAAS,KAEXM,QAAQC,IAAIF,EAAeL,GAC3Bd,KAAKC,UAAY,OAAOkB,EAAeL,IAI3Cf,EAAAI,UAAAM,aAAA,SAAaD,GACX,IAAIN,EAAe,GACfoB,GAAU,EAuBd,OAtBAF,QAAQC,IAAIb,GACZA,EAAMe,SAASf,GACfY,QAAQC,IAAIb,GACRgB,MAAMhB,KACRN,EAAe,2CACfkB,QAAQC,IAAInB,GACZoB,GAAU,GAINd,EAAM,GAAOgB,MAAMhB,KACvBN,EAAe,0CACfkB,QAAQC,IAAInB,GACZoB,GAAU,GAGRd,EAAM,IACRN,EAAe,gDACfkB,QAAQC,IAAInB,GACZoB,GAAU,GAEZtB,KAAKE,aAAeA,EACboB,GAtEEvB,EAAc0B,WAAA,CAL1B5B,OAAA6B,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,6BAED9B,GAAb,GAAa+B,QAAA/B,eAAAA","file":"part2.component.min.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-part2',\n  templateUrl: './part2.component.html',\n  styleUrls: ['./part2.component.scss'],\n})\nexport class Part2Component {\n  public diamonds = '';\n  public errorMessage = '';\n  public numberOfDiamond: any;\n  constructor() {}\n\n  onNumberIsChange(value: any){\n    this.diamonds = '';\n    this.drawDiamond(value.target.value);\n  }\n\n  drawDiamond(num: number) {\n    if (this.validatation(num)) {\n      this.errorMessage = '';\n      let initialSpace = '   '; // 3 length\n      let numSize = num - 1;\n      for (let i = 0; i < numSize; i++) {\n        this.createDiamond(num, i, initialSpace);\n      }\n      for (let i = numSize; i >= 0; i--) {\n        this.createDiamond(num, i, initialSpace);\n      }\n    }\n  }\n\n  addSpace(num: number, i: number) {\n    let astrk = '';\n    const lengthSpace = Math.round(num / 2) - i + 4;\n    for (let j = 0; j <= lengthSpace; j++) {\n      astrk += ' ';\n    }\n    return astrk;\n  }\n\n  createDiamond(num: number, i: number, initialSpace: string) {\n    if (!(i % 2)) {\n      let astrk = this.addSpace(num, i);\n      for (let j = 0; j <= i; j++) {\n        astrk += ' *';\n      }\n      console.log(initialSpace + astrk);\n      this.diamonds += `<br>`+initialSpace + astrk;\n    }\n  }\n\n  validatation(num: any) {\n    let errorMessage = '';\n    let isValid = true;\n    console.log(num)\n    num = parseInt(num);\n    console.log(num)\n    if (isNaN(num)) {\n      errorMessage = 'Error: This input cannot be Not A Number';\n      console.log(errorMessage);\n      isValid = false;\n    }\n\n\n    if (!(num % 2) && !isNaN(num)) {\n      errorMessage = 'Error: This input cannot be even number';\n      console.log(errorMessage);\n      isValid = false;\n    }\n\n    if (num < 0) {\n      errorMessage = 'Error: This input cannot be a negative number';\n      console.log(errorMessage);\n      isValid = false;\n    }\n    this.errorMessage = errorMessage;\n    return isValid;\n  }\n}\n"]}